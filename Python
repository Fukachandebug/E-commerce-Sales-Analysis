# %%
import pandas as pd
import re

# %%
# Open the CSV file
df = pd.read_csv('Subject_1-Summer products.csv')

# Drop the first column
df = df.iloc[:, 1:]
df

# %%
# Check if there are nulls each column
df.info()

# %% [markdown]
# ### DATA CLEANING

# %%
# Remove unnecessary line from title orig column
df["title_orig"] = df["title_orig"].str.replace(r'[\r\n]+', '', regex=True)

# %%
# duplicates
df.duplicated()

# drop duplicates and remain just one unique row
df = df.drop_duplicates(keep='first')

# %%
# if duplicate occurs due to whether urgant banner is used or not, then remain a row which used urgent banner by droping non urgent banner.
# remain data which banner is 1
df = (df.sort_values(by='has_urgency_banner', ascending=False).drop_duplicates(subset=['product_id', 'merchant_id', 'title_orig', 'units_sold', 'price'], keep='first'))
df.shape


# %%
# null values
null_columns = df.columns[df.isnull().any()].tolist()
null_columns

# %% [markdown]
# Rating columns

# %%
# If rating_count is 0, then fill the rating_five_count, rating_four_count, rating_three_count, rating_two_count, rating_one_count with 'No ratings'
df.loc[df['rating_count'] == 0, ['rating_five_count', 'rating_four_count', 
                                 'rating_three_count', 'rating_two_count', 'rating_one_count']] = 0    

# %% [markdown]
# Product_color Column

# %%
# Confirm how many unique values there are
unique_colors = df['product_color'].nunique()
print(f'The number of unique product colors is: {unique_colors}')


# %%
# Simplified color column cleaning
df['product_color'] = (
    df['product_color']
    .fillna('Undefined')
    .replace({
        'army': 'Army green',
        'armygreen': 'Army green',
        'blackwhite': 'Black and white',
        'gray': 'grey',
        'gray & white': 'Grey & white',
        'greysnakeskinprint': 'Grey snake skin print',
        'leopard': 'Leopard print',
        'lightgray': 'light grey',
        'lightgrey': 'light grey',
        'navy': 'Navy blue',
        'navi blue': 'Navy blue',
        'rosered': 'Rose red',
        'wine red': 'Winered',
        'wine': 'Winered'
    })
)
# Standardize the product_color column with the 1st letter capitalized
df['product_color'] = df['product_color'].str.title()

# Confirm the unique values in the product_color column
unique_colors = df['product_color'].unique()
unique_colors

# %% [markdown]
# Product color category (high level)

# %%
color_categories = {
    'white': ['white', 'offwhite', 'ivory'],
    'black': ['black', 'coolblack', 'offblack'],
    'blue': ['blue', 'navy'],
    'green': ['green'],
    'red': ['red', 'coralred', 'burgundy', 'claret'],
    'pink': ['pink', 'rose', 'floral'],
    'yellow': ['yellow'],
    'orange': ['orange', 'apricot'],
    'purple': ['purple', 'violet'],
    'brown': ['brown', 'camel', 'coffee', 'tan', 'khaki', 'beige', 'nude'],
    'grey': ['grey', 'light grey', 'grey & white', 'grey snake skin print'],
    'gold': ['gold']
}

def categorize_product_color(color_text):
    if pd.isna(color_text):
        return 'undefined'
    
    color_text = str(color_text).lower()

    for category, keywords in color_categories.items():
        if any(keyword in color_text for keyword in keywords):
            return category
    return 'other'

df['color_category'] = df['product_color'].apply(categorize_product_color)


# %% [markdown]
# product_variation_size_id Column

# %%
# Create a new column and change raw data to capital letter
df['cleaned_size'] = df['product_variation_size_id'].astype(str).str.upper()
 
# Delete unnecessary characters
# List unnecessary characters
remove_list = ['.', '-', 'Size', 'SIZE', '/', 'US', 'X   L']
 
# Define a function which judges whether unnecessary characters are included and replace
def remove_if_contains(value):
    value = str(value)
    for item in remove_list:
        if item in value:
            value = value.replace(item, '')
    return value
 
# Apply
df['cleaned_size'] = df['cleaned_size'].apply(remove_if_contains)
# Delete unneccesary blank
df['cleaned_size'] = df['cleaned_size'].astype(str).str.strip()
df['cleaned_size'].unique()
 
# Categorize size
def categorize_size(size):
    if size == 'XXXS':
        return 'XXXS'
    elif size == 'XXS':
        return 'XXS'
    elif size == 'XS':
        return 'XS'
    elif size == 'S':
        return 'S'
    elif size == 'M':
        return 'M'
    elif size == 'L':
        return 'L'
    elif size == 'XL':
        return 'XL'
    elif size == 'XXL' or size == '2XL':
        return '2XL'
    elif size == 'XXXL' or size == '3XL':
        return '3XL'
    elif size == 'XXXXL' or size == '4XL':
        return '4XL'
    elif size == 'XXXXXL' or size == '5XL':
        return '5XL'
    else:
        return size
   
# Apply
df['cleaned_size'] = df['cleaned_size'].apply(categorize_size)

# Replace NaN values and empty values with 'Undefined'
df['cleaned_size'] = df['cleaned_size'].replace('', 'Undefined')
df.head(1)

# %%
df['cleaned_size'].unique()

# %% [markdown]
# has_urgency_banner Column

# %%
# Fill has_urgency_banner null values with '0'
df['has_urgency_banner'].fillna('0', inplace=True)

# %% [markdown]
# urgency_text Column

# %%
# Replace null values with 'No urgency'
df['urgency_text'].fillna('No urgency', inplace=True)

# Replace 'QuantitÃ© limitÃ©e !' to 'Limited quantity!' and 'RÃ©duction sur les achats en gros' to 'Bulk purchase discount'
df['urgency_text'] = df['urgency_text'].replace({
    'Quantité limitée !': 'Limited quantity!',
    'Réduction sur les achats en gros': 'Bulk purchase discount'
})
# Confirm the unique values
unique_urgency_text = df['urgency_text'].unique()
unique_urgency_text

# %% [markdown]
# origin_country Column

# %%
# Fill null values with 'Unknown'
df['origin_country'].fillna('Unknown', inplace=True)

# %% [markdown]
# merchant_info_subtitle Column

# %%
# Extract the percentage as a string (e.g., '83')
df['merchant_rating_percent'] = df['merchant_info_subtitle'].str.extract(r'(\d+)\s*%')

# If you want it as an integer:
df['merchant_rating_percent'] = df['merchant_rating_percent'].astype(float)

#For the NaN Values and fill it 'No % calculated'
df['merchant_rating_percent'].fillna('No % calculated', inplace=True)

#For empty values, fill it with 'No % calculated'
df['merchant_rating_percent'] = df['merchant_rating_percent'].replace('', 'No % calculated')

#Confirm the unique values
unique_merchant_rating = df['merchant_rating_percent'].unique()
unique_merchant_rating

# %% [markdown]
# shipping_option_name Column

# %%
#Confirm the unique values
unique_shipping_options = df['shipping_option_name'].unique()  
unique_shipping_options 

# %%
#For shipping_option_name column, replace 'Livraison standard', 'Envio Padrão', 'Standart Gönderi', 'Standardversand', 'Envío normal', 'Standardowa wysyłka','الشحن القياسي', 'Expediere Standard', 'การส่งสินค้ามาตรฐาน','Standard Shipping', 'ការដឹកជញ្ជូនតាមស្តង់ដារ','Livraison Express', 'Стандартная доставка', 'Spedizione standard', and 'Ekspresowa wysyłka' to 'Standard Shipping'
df['shipping_option_name'] = df['shipping_option_name'].replace({
    'Livraison standard': 'Standard Shipping',
    'Envio Padrão': 'Standard Shipping',
    'Standart Gönderi': 'Standard Shipping',
    'Standardversand': 'Standard Shipping',
    'Envío normal': 'Standard Shipping',
    'Standardowa wysyłka': 'Standard Shipping',
    'الشحن القياسي': 'Standard Shipping',
    'Expediere Standard': 'Standard Shipping',
    'การส่งสินค้ามาตรฐาน': 'Standard Shipping',
    'Standard Shipping': 'Standard Shipping',
    'ការដឹកជញ្ជូនតាមស្តង់ដារ': 'Standard Shipping',
    'Livraison Express': 'Express Shipping',
    'Стандартная доставка': 'Standard Shipping',
    'Spedizione standard': 'Standard Shipping',
    'Ekspresowa wysyłka': 'Express Shipping'
})
unique_shipping_options = df['shipping_option_name'].unique()  
unique_shipping_options 

# %%
#Confirm the columns that have null values
null_columns = df.columns[df.isnull().any()].tolist()
null_columns

# %% [markdown]
# product_variation_size_id = was replaced with cleaned_size

# %% [markdown]
# merchant_name = Probably not going to use it

# %% [markdown]
# merchant_info_subtitle = We are not going to use it. And if we do, there´s just 1 NaN value that idk why is there

# %% [markdown]
# merchant_profile_picture = No data cleaning

# %% [markdown]
# Categorizing products and target gender

# %%
def clean_and_replace_space(text):
    if pd.isna(text):
        return ""
    return str(text).strip().replace(" ", ",").lower()

df['cleaned_title'] = df['title_orig'].apply(clean_and_replace_space)
df['cleaned_title']

df['combined_text'] = df['cleaned_title'] + df['tags']

women_keywords = ['women', 'female', 'ladies', 'lady']
men_keywords = ['men', 'male']
kids_keywords = ['kids', 'baby', 'children']

def detect_fashion_flg(row):
    text = str(row['combined_text']).lower()
   
    if all(keyword not in text for keyword in women_keywords + men_keywords):
        if 'fashion' not in text and 'dress' not in text:
            return 0
   
    return 1

df['fashion_flg'] = df.apply(detect_fashion_flg, axis=1)
#df.to_csv('category.csv', index=False)


women_keywords = ['women', 'female', 'ladies', 'lady']
men_keywords = ['men', 'male']

def def_detect_gender(row):
    if row['fashion_flg'] == 1:
        text = str(row['combined_text']).lower()
        title = str(row['title_orig']).lower()

        if all(kw not in text for kw in women_keywords + men_keywords):
            return 'unisex'
        elif any(kw in text for kw in women_keywords):
            return 'women'
        elif any(kw in text for kw in men_keywords):
            return 'men'
        else:
            return 'unisex'
    return 'no gender'
   
df['gender_flg'] = df.apply(def_detect_gender, axis=1)

category_map = {
    "cardigan": ["cardigan", "jacket", "coat"],
    "jumpsuits": ["jumpsuit", "jumpsuits", "overall"],
    "shoes/sandals": ["shoe", "sandal", "slipper", "flipflop", "flip flop"],
    "homewear": ["sleep", "pajama", "lounge"],
    "sports": ["sport", "yoga", "legging"],
    "skirts": ["skirt", "skort"],
    "dresses": ["dress"],
    "camisole/tanktop": ["vest","camisole", "tank"],
    "swimwear": ["swimwear", "bikini", "swim", "beach"],
    "accessories": ["accessory", "accessories", "ring", "anklet", "bracelet", "necklace", "scarf", "cap", "bag", "hat"],
    "t-shirts": ["t-shirt", "t shirt"],
    "shirts/blouse": ["blouse", "shirt"],
    "pants": ["pants", "trouser", "jean", "shorts"]
}

keyword_to_category = {
    keyword: category
    for category, keywords in category_map.items()
    for keyword in keywords
}

def detect_product_category(row):
    if row['fashion_flg'] != 1:
        return "non-fashion"

    text = str(row['title_orig']).lower()
    tokens = [t.strip() for t in text.split(',')]

    ignore_keywords = ['spring', 'baggy', 'drawstring', 'hate', 'layering', 'capri', 'sheering', 'bring']

    for keyword in category_map['accessories']:
        if keyword in text:
            
            if not any(ik in text for ik in ignore_keywords):
                return "accessories"

   
    for keyword, category in keyword_to_category.items():
        if category == "accessories":
            continue  
        for token in tokens:
            if keyword in token:
                return category

    return "others(fashion)"

df['product_category'] = df.apply(detect_product_category, axis=1)

print(df['product_category'].value_counts())

# df.to_csv('Cleaned_data_Ecommerce.csv', index=False)
print("Data cleaning and processing completed. Cleaned data saved to 'Cleaned_data_Ecommerce.csv'.")

# %%
# add sales column
df['sales'] = df['price'] * df['units_sold']
df['sales']

# %% [markdown]
# Create a new column for difference between price and average of price each category

# %%
# average price for each category
df['avg_price_category'] = df.groupby('product_category')['price'].transform('mean')
df['diff_price_category'] = df['price'] - df['avg_price_category']

# %%
df[['product_category','avg_price_category']].value_counts()

# %%
# Export csv file
df.to_csv('Cleaned_data_Ecommerce.csv', index=False)

# %% [markdown]
# Decision Tree Analysis & Multi Regression Analysis

# %%
pip install statsmodels

# %%
pip install statsmodels

# %%
pip install sklearn

# %%
!pip install scikit-learn

# %%
import statsmodels.api as sm
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor, plot_tree

# %% [markdown]
# Camisole/Tank top

# %%
# Extract products for analysis
df_dress = df[(df['product_category'].isin(["camisole/tanktop"])) & (df['inventory_total'] > 0) & (df['units_sold'] > 99)]

# Create flags for tags that appear in 20 or more records
tags_dummies = df_dress['tags'].str.get_dummies(sep=',')
df_dress = pd.concat([df_dress, tags_dummies], axis=1)
tag_counts = tags_dummies.sum()
valid_tags = tag_counts[tag_counts>=20].index

# Separate explanatory variables and target variable
X_tree = tags_dummies[valid_tags]
y = df_dress['sales']

# Decision tree analysis
tree_reg = DecisionTreeRegressor(max_depth=3, random_state=0, min_samples_leaf=2)
tree_reg.fit(X_tree, y)
plt.figure(figsize=(8, 4), dpi=1000)
plot_tree(tree_reg,
    feature_names=X_tree.columns, # Display feature names
    filled=True, # Color the nodes
    precision=1) # Number of decimal places to round
plt.show()

# Extract top 10 most important features
feature_importances = pd.Series(tree_reg.feature_importances_, index=X_tree.columns)
top_features = feature_importances.sort_values(ascending=False).head(10).index.tolist()
print("Top10_features", top_features)

# %%
# Create flags based on color categories
df['flg_black']  = (df['color_category'] == 'black').astype(int)
df['flg_blue']   = (df['color_category'] == 'blue').astype(int)
df['flg_green']  = (df['color_category'] == 'green').astype(int)
df['flg_grey']   = (df['color_category'] == 'grey').astype(int)
df['flg_purple'] = (df['color_category'] == 'purple').astype(int)
df['flg_red']    = (df['color_category'] == 'red').astype(int)
df['flg_white']  = (df['color_category'] == 'white').astype(int)
df['flg_yellow'] = (df['color_category'] == 'yellow').astype(int)
df['flg_brown']  = (df['color_category'] == 'brown').astype(int)
df['flg_gold']   = (df['color_category'] == 'gold').astype(int)
df['flg_orange'] = (df['color_category'] == 'orange').astype(int)
df['flg_pink']   = (df['color_category'] == 'pink').astype(int)

df['flg_size_L']    = (df['cleaned_size'] == 'L').astype(int)
df['flg_size_M']    = (df['cleaned_size'] == 'M').astype(int)
df['flg_size_S']    = (df['cleaned_size'] == 'S').astype(int)
df['flg_size_XL']   = (df['cleaned_size'] == 'XL').astype(int)
df['flg_size_XS']   = (df['cleaned_size'] == 'XS').astype(int)
df['flg_size_over_XXL']  = ((df['cleaned_size'] == 'XXL')|(df['cleaned_size'] == 'XXXL')|(df['cleaned_size'] == '4XL')|(df['cleaned_size'] == '5XL')).astype(int)
df['flg_size_under_XXS']  = ((df['cleaned_size'] == 'XXS')|(df['cleaned_size'] == 'XXXS')).astype(int)

# Feature selection
features = ['T Shirts', 'sexy', 'sleeveless', 'Beach', 'Cotton',  
    'flg_black', 'flg_blue', 'flg_green', 'flg_grey', 'flg_purple', 'flg_red',
    'flg_white', 'flg_yellow', 'flg_brown', 'flg_gold', 'flg_orange', 'flg_pink',
    'flg_size_L', 'flg_size_M', 'flg_size_S', 'flg_size_XL', 'flg_size_XS',
    'flg_size_over_XXL', 'flg_size_under_XXS', 'uses_ad_boosts', "has_urgency_banner", 'merchant_has_profile_picture', "price", "rating", "badge_product_quality","badge_local_product","badge_fast_shipping"
]


X_mra = df_dress[features]
y = df_dress['sales']

X_mra = X_mra.astype(float)

# Multiple regression analysis
X_sm = sm.add_constant(X_mra)
model = sm.OLS(y, X_sm)
results = model.fit()
print(results.summary())

# %%
summary_df = results.summary2().tables[1] 
summary_df.to_csv("regression_results.csv")

# %% [markdown]
# Dress

# %%
# Extract products for analysis
df_dress = df[(df['product_category'].isin(["dresses"])) & (df['inventory_total'] > 0) & (df['units_sold'] > 99)]

# Create flags for tags that appear in 20 or more records
tags_dummies = df_dress['tags'].str.get_dummies(sep=',')
df_dress = pd.concat([df_dress, tags_dummies], axis=1)
tag_counts = tags_dummies.sum()
valid_tags = tag_counts[tag_counts>=20].index

# Separate explanatory variables and target variable
X_tree = tags_dummies[valid_tags]
y = df_dress['sales']


# Decision tree analysis
tree_reg = DecisionTreeRegressor(max_depth=3, random_state=0, min_samples_leaf=2)
tree_reg.fit(X_tree, y)
plt.figure(figsize=(8, 4), dpi=1000)
plot_tree(tree_reg,
    feature_names=X_tree.columns, # Display feature names
    filled=True, # Color the nodes
    precision=1) # Number of decimal places to round
plt.show()

# Extract top 10 most important features
feature_importances = pd.Series(tree_reg.feature_importances_, index=X_tree.columns)
top_features = feature_importances.sort_values(ascending=False).head(10).index.tolist()
print("Top10_features", top_features)

# %%
# Feature selection
features = ['Lace', 'sexy', 'Plus Size', 'Floral dress',  "diff_price_category",
    'flg_black', 'flg_blue', 'flg_green', 'flg_grey', 'flg_purple', 'flg_red',
    'flg_white', 'flg_yellow', 'flg_brown', 'flg_gold', 'flg_orange', 'flg_pink',
    'flg_size_L', 'flg_size_M', 'flg_size_S', 'flg_size_XL', 'flg_size_XS',
    'flg_size_over_XXL', 'flg_size_under_XXS', 'uses_ad_boosts', "has_urgency_banner", 'merchant_has_profile_picture', "price", "rating", "badge_product_quality","badge_local_product","badge_fast_shipping"
]


X_mra = df_dress[features]
y = df_dress['sales']

X_mra = X_mra.astype(float)

# Multiple regression analysis
X_sm = sm.add_constant(X_mra)
model = sm.OLS(y, X_sm)
results = model.fit()
print(results.summary())

# %%
summary_df = results.summary2().tables[1] 
summary_df.to_csv("regression_results.csv")

# %% [markdown]
# Swimwear

# %%
# Extract products for analysis
df_dress = df[(df['product_category'].isin(["swimwear"])) & (df['inventory_total'] > 0) & (df['units_sold'] > 99)]

# Create flags for tags that appear in 20 or more records
tags_dummies = df_dress['tags'].str.get_dummies(sep=',')
df_dress = pd.concat([df_dress, tags_dummies], axis=1)
tag_counts = tags_dummies.sum()
valid_tags = tag_counts[tag_counts>=20].index

# Separate explanatory variables and target variable
X_tree = tags_dummies[valid_tags]
y = df_dress['sales']


# Decision tree analysis
tree_reg = DecisionTreeRegressor(max_depth=3, random_state=0, min_samples_leaf=2)
tree_reg.fit(X_tree, y)
plt.figure(figsize=(8, 4), dpi=1000)
plot_tree(tree_reg,
    feature_names=X_tree.columns, # Display feature names
    filled=True, # Color the nodes
    precision=1) # Number of decimal places to round
plt.show()

# Extract top 10 most important features
feature_importances = pd.Series(tree_reg.feature_importances_, index=X_tree.columns)
top_features = feature_importances.sort_values(ascending=False).head(10).index.tolist()
print("Top10_features", top_features)

# %%
# Feature selection
features = ['Suits', 'sexy', 'Beach', 'Swimming', 'Swimsuit',  
    'flg_black', 'flg_blue', 'flg_green', 'flg_grey', 'flg_purple', 'flg_red',
    'flg_white', 'flg_yellow', 'flg_brown', 'flg_gold', 'flg_orange', 'flg_pink',
    'flg_size_L', 'flg_size_M', 'flg_size_S', 'flg_size_XL', 'flg_size_XS',
    'flg_size_over_XXL', 'flg_size_under_XXS', 'uses_ad_boosts', "has_urgency_banner", 'merchant_has_profile_picture', "price", "rating", "badge_product_quality","badge_local_product","badge_fast_shipping", "retail_price"
]


X_mra = df_dress[features]
y = df_dress['sales']

X_mra = X_mra.astype(float)

# Multiple regression analysis
X_sm = sm.add_constant(X_mra)
model = sm.OLS(y, X_sm)
results = model.fit()
print(results.summary())

# %%
summary_df = results.summary2().tables[1]  # [1]がcoefficientsの表
summary_df.to_csv("regression_results.csv")


